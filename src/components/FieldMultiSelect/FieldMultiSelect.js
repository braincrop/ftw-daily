import React from 'react';
import { func, node, object, string, array } from 'prop-types';
import { Field } from 'react-final-form';
import classNames from 'classnames';
import { ValidationError } from '../../components';
import Select from 'react-select';

const handleChange = (propsOnChange, inputOnChange) => event => {
  if (propsOnChange) {
    const value = event.key;
    propsOnChange(value);
  }
  inputOnChange(event);
};

const FieldMultiSelectComponent = props => {
  const {
    rootClassName,
    className,
    selectClassName,
    id,
    label,
    input,
    meta,
    children,
    options,
    onChange,
    disabled,
    placeholder,
    ...rest
  } = props;

  if (label && !id) {
    throw new Error('id required when a label is given');
  }

  const { valid, invalid, touched, error } = meta;
  const hasError = touched && invalid && error;

  const { onChange: inputOnChange, values, value, ...restOfInput } = input;

  const selectProps = {
    id,
    onChange: handleChange(onChange, inputOnChange),
    ...restOfInput,
    ...rest,
  };
  const styles = {
    control: (provided, state) => {
      return({
      ...provided,
      widht: '100%',
      minHeight: 65,
      boxShadow: 'none',
      borderTop: 'none',
      borderLeft: 'none',
      borderRadius: '0px',
      borderRight: 'none',
      backgroundColor: 'none',
      borderBottomColor: disabled ? 'grey' : hasError ? 'red' : input.value ? '#6BDE98' : 'orange',
      "&:hover": {
        ...provided,
        minHeight: 65,
        backgroundColor: 'none',
        boxShadow: 'none',
        borderTop: 'none',
        borderLeft: 'none',
        widht: '100%',
        borderRight: 'none',
        borderRadius: '0px',
        borderBottomColor: state.disabled ? 'grey' : state.hasError ? 'red' : input.value ? '#6BDE98' : 'orange',
      }
    })},
    placeholder: (provided, state) => {
      return({
      ...provided,
      top: '48%',
      fontSize: '16px',
      lineHeight: '22px',
      color: '#b2b2b2',
    })},
    valueContainer: (provided, state) => {
      return({
      ...provided,
      padding: '3px 8px 3px 0',
      overflow: 'visible',
    })},
  }

  return (
    <div>
      {label ? <label htmlFor={id}>{label}</label> : null}
      <Select
        isMulti
        value={value}
        styles={styles}
        id={id}
        classNamePrefix='react-select'
        {...selectProps}
        disabled={disabled}
        options={options}
        placeholder={placeholder}
      />
      <ValidationError fieldMeta={meta} />
    </div>
  );
};

FieldMultiSelectComponent.defaultProps = {
  rootClassName: null,
  className: null,
  selectClassName: null,
  id: null,
  label: null,
  children: null,
  options: null, 
  placeholder: null
};

FieldMultiSelectComponent.propTypes = {
  rootClassName: string,
  className: string,
  selectClassName: string,
  options: array,
  onChange: func,
  placeholder: string,
  // Label is optional, but if it is given, an id is also required so
  // the label can reference the input in the `for` attribute
  id: string,
  label: string,
  // Generated by final-form's Field component
  input: object.isRequired,
  meta: object.isRequired,

  children: node,
};

const FieldMultiSelect = props => {
  return <Field component={FieldMultiSelectComponent} {...props} />;
};

export default FieldMultiSelect;
